plugins {
    id 'java'
    id 'application'
    id 'com.google.protobuf'
    id 'com.palantir.docker'
}

configureProtobuf()

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

application {
    mainClass = 'com.github.wizard.Server'
}

dependencies {
    implementation 'info.picocli:picocli:4.6.3'
    annotationProcessor 'info.picocli:picocli-codegen:4.6.3'
    implementation 'org.tinylog:tinylog-api:2.4.1'
    implementation 'org.tinylog:tinylog-impl:2.4.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'org.mockito:mockito-core:4.5.1'
    testImplementation 'org.mockito:mockito-inline:4.5.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.5.1'
}

compileJava {
    options.compilerArgs += [
        "-Aproject=${project.group}/${project.name}"
    ]
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.enabled true
    }
}

jar {
    manifest {
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Main-Class": "com.github.wizard.Server"
                )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = 'include'
}

docker {
    name "fhilgers/${project.name}:${project.version}"
    tag 'latest', "fhilgers/${project.name}:latest"
    files tasks.jar.outputs, 'docker-entrypoint.sh'
    buildArgs([NAME: "${project.name}", VERSION: "${project.version}"])
}
